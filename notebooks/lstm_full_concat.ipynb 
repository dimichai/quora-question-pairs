{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"sequential_model.ipynb","version":"0.3.2","provenance":[],"collapsed_sections":[],"toc_visible":true},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"metadata":{"id":"qKT0ZAJDDP1U","colab_type":"text"},"cell_type":"markdown","source":["## Siamese LSTM using GloVe 300d\n","- Shared Embedding Layers\n","- Shared LSTM Layers\n","- Full Concatenation of the tower outputs\n","- Dense (200)\n","- Dropout (0.1)\n","- Batch Normalization\n","- Dense (1, sigmoid)"]},{"metadata":{"id":"UnXA6sVQyXxT","colab_type":"code","outputId":"b68d48fc-912d-4158-d14c-36bcc2df67ef","executionInfo":{"status":"ok","timestamp":1543741214246,"user_tz":-60,"elapsed":126423,"user":{"displayName":"Dimitris Michailidis","photoUrl":"https://lh4.googleusercontent.com/-gqfyDKSRdb4/AAAAAAAAAAI/AAAAAAAAAjM/8OOFAsZoU-M/s64/photo.jpg","userId":"12419194121595599642"}},"colab":{"base_uri":"https://localhost:8080/","height":357}},"cell_type":"code","source":["!wget http://nlp.stanford.edu/data/glove.6B.zip\n","!unzip glove.6B.zip"],"execution_count":1,"outputs":[{"output_type":"stream","text":["--2018-12-02 08:58:09--  http://nlp.stanford.edu/data/glove.6B.zip\n","Resolving nlp.stanford.edu (nlp.stanford.edu)... 171.64.67.140\n","Connecting to nlp.stanford.edu (nlp.stanford.edu)|171.64.67.140|:80... connected.\n","HTTP request sent, awaiting response... 302 Found\n","Location: https://nlp.stanford.edu/data/glove.6B.zip [following]\n","--2018-12-02 08:58:10--  https://nlp.stanford.edu/data/glove.6B.zip\n","Connecting to nlp.stanford.edu (nlp.stanford.edu)|171.64.67.140|:443... connected.\n","HTTP request sent, awaiting response... 200 OK\n","Length: 862182613 (822M) [application/zip]\n","Saving to: ‘glove.6B.zip’\n","\n","glove.6B.zip        100%[===================>] 822.24M  5.50MB/s    in 97s     \n","\n","2018-12-02 08:59:47 (8.45 MB/s) - ‘glove.6B.zip’ saved [862182613/862182613]\n","\n","Archive:  glove.6B.zip\n","  inflating: glove.6B.50d.txt        \n","  inflating: glove.6B.100d.txt       \n","  inflating: glove.6B.200d.txt       \n","  inflating: glove.6B.300d.txt       \n"],"name":"stdout"}]},{"metadata":{"id":"C0MktKFTDP1W","colab_type":"code","colab":{}},"cell_type":"code","source":["import pandas as pd\n","import numpy as np\n","from keras.layers.embeddings import Embedding\n","from keras.layers import Dropout, BatchNormalization, Input, Embedding, Flatten, concatenate, Dense, LSTM\n","from keras.preprocessing.text import one_hot, Tokenizer\n","from keras.preprocessing.sequence import pad_sequences\n","from keras.models import Sequential, Model, load_model\n","from keras.callbacks import ModelCheckpoint, EarlyStopping\n","from sklearn.model_selection import train_test_split"],"execution_count":0,"outputs":[]},{"metadata":{"id":"wTjlqyuPDP1Z","colab_type":"code","colab":{}},"cell_type":"code","source":["np.random.seed(42)"],"execution_count":0,"outputs":[]},{"metadata":{"id":"2u6kicLVDP1c","colab_type":"code","colab":{}},"cell_type":"code","source":["df_train = pd.read_csv('train_data.csv')\n","df_labels = pd.read_csv('train_labels.csv')"],"execution_count":0,"outputs":[]},{"metadata":{"id":"Wn_7u6t_86ot","colab_type":"code","colab":{}},"cell_type":"code","source":["df_train = df_train.astype({'question1': str, 'question2': str})"],"execution_count":0,"outputs":[]},{"metadata":{"id":"fKgr1_EU8JrA","colab_type":"code","outputId":"0290d787-a697-4322-93c8-509fecfdbcd1","executionInfo":{"status":"ok","timestamp":1543747610740,"user_tz":-60,"elapsed":13167,"user":{"displayName":"Dimitris Michailidis","photoUrl":"https://lh4.googleusercontent.com/-gqfyDKSRdb4/AAAAAAAAAAI/AAAAAAAAAjM/8OOFAsZoU-M/s64/photo.jpg","userId":"12419194121595599642"}},"colab":{"base_uri":"https://localhost:8080/","height":153}},"cell_type":"code","source":["df_train.info()"],"execution_count":7,"outputs":[{"output_type":"stream","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 323144 entries, 0 to 323143\n","Data columns (total 3 columns):\n","id           323144 non-null int64\n","question1    323144 non-null object\n","question2    323144 non-null object\n","dtypes: int64(1), object(2)\n","memory usage: 7.4+ MB\n"],"name":"stdout"}]},{"metadata":{"id":"XsZ38-4CDP1f","colab_type":"code","colab":{}},"cell_type":"code","source":["# Create the questions vocabulary\n","tokenizer = Tokenizer()\n","questions = pd.concat([df_train['question1'], df_train['question2']])\n","tokenizer.fit_on_texts(questions)"],"execution_count":0,"outputs":[]},{"metadata":{"id":"hPZEvn8yDP1i","colab_type":"code","colab":{}},"cell_type":"code","source":["# We add one, because we will need to specify the integer for the largest encoded word as an array index, \n","# e.g. words encoded 1 to 21 with array indices 0 to 21 or 22 positions.\n","\n","vocab_size = len(tokenizer.word_index) + 1"],"execution_count":0,"outputs":[]},{"metadata":{"id":"X2ZuNcE3DP1k","colab_type":"code","colab":{}},"cell_type":"code","source":["# Integer Encode\n","q1_int_sequence = tokenizer.texts_to_sequences(df_train['question1'])\n","q2_int_sequence = tokenizer.texts_to_sequences(df_train['question2'])"],"execution_count":0,"outputs":[]},{"metadata":{"id":"Sc11eXkzDP1m","colab_type":"code","colab":{}},"cell_type":"code","source":["q1_padded = pad_sequences(q1_int_sequence, maxlen=25)\n","q2_padded = pad_sequences(q2_int_sequence, maxlen=25)"],"execution_count":0,"outputs":[]},{"metadata":{"id":"GkL3P-5ADP1o","colab_type":"code","colab":{}},"cell_type":"code","source":["# Load the Glove Embeddings\n","f = open('glove.6B.300d.txt')\n","# f = open('glove.6B.100d.txt')\n","embeddings_index = dict()\n","for line in f:\n","    embedding = line.split()\n","    word_key = embedding[0]\n","    word_weights = np.asarray(embedding[1:], dtype='float32')\n","    embeddings_index[word_key] = word_weights\n","f.close()"],"execution_count":0,"outputs":[]},{"metadata":{"id":"UhFXvnysDP1s","colab_type":"code","colab":{}},"cell_type":"code","source":["embedding_matrix = np.zeros((vocab_size, 300))\n","for word, i in tokenizer.word_index.items():\n","    embedding = embeddings_index.get(word)\n","    if embedding is not None:\n","        embedding_matrix[i] = embedding"],"execution_count":0,"outputs":[]},{"metadata":{"id":"edsqEeghDP1v","colab_type":"code","colab":{}},"cell_type":"code","source":["# Create the network\n","embedding_layer = Embedding(vocab_size, 300, weights=[embedding_matrix], input_length=25, trainable=False)\n","lstm_layer = LSTM(256, activation='tanh')\n","\n","q1_input = Input(shape=(25,))\n","q1_model = embedding_layer(q1_input)\n","q1_model = lstm_layer(q1_model)\n","# q1_model = Flatten()(q1_model)\n","\n","q2_input = Input(shape=(25,))\n","q2_model = embedding_layer(q2_input)\n","q2_model = lstm_layer(q2_model)\n","# q2_model = Flatten()(q2_model)"],"execution_count":0,"outputs":[]},{"metadata":{"id":"x22fg3a2DP1z","colab_type":"code","colab":{}},"cell_type":"code","source":["DENSE_OUTPUT = 200\n","merged_model = concatenate([q1_model, q2_model])\n","merged_model = Dense(DENSE_OUTPUT, activation='relu')(merged_model)\n","merged_model = Dropout(0.1)(merged_model)\n","merged_model = BatchNormalization()(merged_model)\n","\n","merged_model = Dense(1, activation='sigmoid')(merged_model)"],"execution_count":0,"outputs":[]},{"metadata":{"id":"82ce37y_DP11","colab_type":"code","colab":{}},"cell_type":"code","source":["model = Model(inputs=[q1_input,q2_input], outputs=merged_model)\n","\n","model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])"],"execution_count":0,"outputs":[]},{"metadata":{"id":"xZLdQaV6DP13","colab_type":"code","colab":{}},"cell_type":"code","source":["X = np.stack((q1_padded, q2_padded), axis=1)\n","y = df_labels['is_duplicate']\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.1, random_state=42)\n","Q1_train = X_train[:,0]\n","Q2_train = X_train[:,1]\n","Q1_test = X_test[:,0]\n","Q2_test = X_test[:,1]"],"execution_count":0,"outputs":[]},{"metadata":{"id":"lwuWAL-QgWk9","colab_type":"code","outputId":"9b585f08-a490-4259-ca29-b72c0ef168eb","executionInfo":{"status":"ok","timestamp":1543748099993,"user_tz":-60,"elapsed":794,"user":{"displayName":"Dimitris Michailidis","photoUrl":"https://lh4.googleusercontent.com/-gqfyDKSRdb4/AAAAAAAAAAI/AAAAAAAAAjM/8OOFAsZoU-M/s64/photo.jpg","userId":"12419194121595599642"}},"colab":{"base_uri":"https://localhost:8080/","height":493}},"cell_type":"code","source":["model.summary()"],"execution_count":19,"outputs":[{"output_type":"stream","text":["__________________________________________________________________________________________________\n","Layer (type)                    Output Shape         Param #     Connected to                     \n","==================================================================================================\n","input_4 (InputLayer)            (None, 25)           0                                            \n","__________________________________________________________________________________________________\n","input_5 (InputLayer)            (None, 25)           0                                            \n","__________________________________________________________________________________________________\n","embedding_3 (Embedding)         (None, 25, 300)      23224200    input_4[0][0]                    \n","                                                                 input_5[0][0]                    \n","__________________________________________________________________________________________________\n","lstm_2 (LSTM)                   (None, 256)          570368      embedding_3[0][0]                \n","                                                                 embedding_3[1][0]                \n","__________________________________________________________________________________________________\n","concatenate_1 (Concatenate)     (None, 512)          0           lstm_2[0][0]                     \n","                                                                 lstm_2[1][0]                     \n","__________________________________________________________________________________________________\n","dense_1 (Dense)                 (None, 200)          102600      concatenate_1[0][0]              \n","__________________________________________________________________________________________________\n","dropout_1 (Dropout)             (None, 200)          0           dense_1[0][0]                    \n","__________________________________________________________________________________________________\n","batch_normalization_1 (BatchNor (None, 200)          800         dropout_1[0][0]                  \n","__________________________________________________________________________________________________\n","dense_2 (Dense)                 (None, 1)            201         batch_normalization_1[0][0]      \n","==================================================================================================\n","Total params: 23,898,169\n","Trainable params: 673,569\n","Non-trainable params: 23,224,600\n","__________________________________________________________________________________________________\n"],"name":"stdout"}]},{"metadata":{"id":"elM88rQKDP16","colab_type":"code","outputId":"8b348b95-2d4a-45a0-e9e4-7d6f4645c0dc","executionInfo":{"status":"error","timestamp":1543754841840,"user_tz":-60,"elapsed":6538747,"user":{"displayName":"Dimitris Michailidis","photoUrl":"https://lh4.googleusercontent.com/-gqfyDKSRdb4/AAAAAAAAAAI/AAAAAAAAAjM/8OOFAsZoU-M/s64/photo.jpg","userId":"12419194121595599642"}},"colab":{"base_uri":"https://localhost:8080/","height":881}},"cell_type":"code","source":["callbacks = [ModelCheckpoint('lstm_concat.{epoch:02d}-{val_loss:.2f}.hdf5', monitor='val_acc', save_best_only=True)]\n","callbacks = [EarlyStopping(patience='5', restore_best_weights=True)]\n","\n","history = model.fit([Q1_train, Q2_train], y_train, epochs=25, batch_size=32, callbacks=callbacks,\n","                   validation_data=([Q1_test, Q2_test], y_test))"],"execution_count":21,"outputs":[{"output_type":"stream","text":["Train on 290829 samples, validate on 32315 samples\n","Epoch 1/25\n"," - 1103s - loss: 0.5085 - acc: 0.7446 - val_loss: 0.4393 - val_acc: 0.7905\n","Epoch 2/25\n"," - 1111s - loss: 0.4208 - acc: 0.8028 - val_loss: 0.4072 - val_acc: 0.8104\n","Epoch 3/25\n"," - 1114s - loss: 0.3662 - acc: 0.8342 - val_loss: 0.3951 - val_acc: 0.8171\n","Epoch 4/25\n"," - 1174s - loss: 0.3189 - acc: 0.8606 - val_loss: 0.3937 - val_acc: 0.8250\n","Epoch 5/25\n"," - 2032s - loss: 0.2791 - acc: 0.8809 - val_loss: 0.3983 - val_acc: 0.8271\n"],"name":"stdout"},{"output_type":"error","ename":"TypeError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-21-c2f7158baeb2>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m history = model.fit([Q1_train, Q2_train], y_train, epochs=25, verbose=2, batch_size=32, callbacks=callbacks,\n\u001b[0;32m----> 4\u001b[0;31m                    validation_data=([Q1_test, Q2_test], y_test))\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/keras/engine/training.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, x, y, batch_size, epochs, verbose, callbacks, validation_split, validation_data, shuffle, class_weight, sample_weight, initial_epoch, steps_per_epoch, validation_steps, **kwargs)\u001b[0m\n\u001b[1;32m   1037\u001b[0m                                         \u001b[0minitial_epoch\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0minitial_epoch\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1038\u001b[0m                                         \u001b[0msteps_per_epoch\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0msteps_per_epoch\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1039\u001b[0;31m                                         validation_steps=validation_steps)\n\u001b[0m\u001b[1;32m   1040\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1041\u001b[0m     def evaluate(self, x=None, y=None,\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/keras/engine/training_arrays.py\u001b[0m in \u001b[0;36mfit_loop\u001b[0;34m(model, f, ins, out_labels, batch_size, epochs, verbose, callbacks, val_f, val_ins, shuffle, callback_metrics, initial_epoch, steps_per_epoch, validation_steps)\u001b[0m\n\u001b[1;32m    215\u001b[0m                         \u001b[0;32mfor\u001b[0m \u001b[0ml\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mo\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mzip\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mout_labels\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mval_outs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    216\u001b[0m                             \u001b[0mepoch_logs\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'val_'\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0ml\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mo\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 217\u001b[0;31m         \u001b[0mcallbacks\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mon_epoch_end\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mepoch\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mepoch_logs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    218\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mcallback_model\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstop_training\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    219\u001b[0m             \u001b[0;32mbreak\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/keras/callbacks.py\u001b[0m in \u001b[0;36mon_epoch_end\u001b[0;34m(self, epoch, logs)\u001b[0m\n\u001b[1;32m     77\u001b[0m         \u001b[0mlogs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlogs\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0;34m{\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     78\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0mcallback\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcallbacks\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 79\u001b[0;31m             \u001b[0mcallback\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mon_epoch_end\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mepoch\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlogs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     80\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     81\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mon_batch_begin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbatch\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlogs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/keras/callbacks.py\u001b[0m in \u001b[0;36mon_epoch_end\u001b[0;34m(self, epoch, logs)\u001b[0m\n\u001b[1;32m    548\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    549\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwait\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 550\u001b[0;31m             \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwait\u001b[0m \u001b[0;34m>=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpatience\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    551\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstopped_epoch\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mepoch\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    552\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstop_training\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mTypeError\u001b[0m: '>=' not supported between instances of 'int' and 'str'"]}]},{"metadata":{"id":"VtiuW3K4pYCB","colab_type":"code","outputId":"6d8d2d09-3841-4ff8-8091-a85239f91ca6","executionInfo":{"status":"error","timestamp":1543755120921,"user_tz":-60,"elapsed":664,"user":{"displayName":"Dimitris Michailidis","photoUrl":"https://lh4.googleusercontent.com/-gqfyDKSRdb4/AAAAAAAAAAI/AAAAAAAAAjM/8OOFAsZoU-M/s64/photo.jpg","userId":"12419194121595599642"}},"colab":{"base_uri":"https://localhost:8080/","height":215}},"cell_type":"code","source":["import matplotlib.pyplot as plt\n","\n","plt.plot(history.history['acc'])\n","plt.plot(history.history['val_acc'])"],"execution_count":24,"outputs":[{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-24-2a603a006a20>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mmatplotlib\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpyplot\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mhistory\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhistory\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'acc'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      4\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mhistory\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhistory\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'val_acc'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'history' is not defined"]}]},{"metadata":{"id":"maqsIPJwptpr","colab_type":"code","outputId":"f90b10ed-88b7-4957-9437-a76e60ac0fb3","executionInfo":{"status":"ok","timestamp":1543581921836,"user_tz":-60,"elapsed":462,"user":{"displayName":"Dimitris Michailidis","photoUrl":"https://lh4.googleusercontent.com/-gqfyDKSRdb4/AAAAAAAAAAI/AAAAAAAAAjM/8OOFAsZoU-M/s64/photo.jpg","userId":"12419194121595599642"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"cell_type":"code","source":["history.history.keys()"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["dict_keys(['loss', 'acc'])"]},"metadata":{"tags":[]},"execution_count":43}]},{"metadata":{"id":"00-6ELl5Lo1r","colab_type":"code","colab":{}},"cell_type":"code","source":["# Apply on test set"],"execution_count":0,"outputs":[]},{"metadata":{"id":"L49SkOfJNbbS","colab_type":"code","colab":{}},"cell_type":"code","source":["df_test = pd.read_csv('test_data.csv')"],"execution_count":0,"outputs":[]},{"metadata":{"id":"ONEfAFmsOBkC","colab_type":"code","colab":{}},"cell_type":"code","source":["test_q1_seq = tokenizer.texts_to_sequences(df_test['question1'])\n","test_q2_seq = tokenizer.texts_to_sequences(df_test['question2'])"],"execution_count":0,"outputs":[]},{"metadata":{"id":"toRwk8feOLll","colab_type":"code","colab":{}},"cell_type":"code","source":["test_q1_padded = pad_sequences(test_q1_seq, maxlen=25)\n","test_q2_padded = pad_sequences(test_q2_seq, maxlen=25)"],"execution_count":0,"outputs":[]},{"metadata":{"id":"JFdUfJLaORQU","colab_type":"code","colab":{}},"cell_type":"code","source":["predicted = model.predict([test_q1_padded, test_q2_padded])"],"execution_count":0,"outputs":[]},{"metadata":{"id":"W_tTSGorOqqo","colab_type":"code","colab":{}},"cell_type":"code","source":["submission = pd.DataFrame()\n","submission['test_id'] = df_test['test_id']\n","submission['is_duplicate'] = predicted"],"execution_count":0,"outputs":[]},{"metadata":{"id":"H8s256U3Osq4","colab_type":"code","colab":{}},"cell_type":"code","source":["submission.loc[submission.is_duplicate < 0.5, 'is_duplicate'] = 0                                                                                                                                                             \n","submission.loc[submission.is_duplicate >= 0.5, 'is_duplicate'] = 1\n","submission['is_duplicate'] = submission['is_duplicate'].astype(int)"],"execution_count":0,"outputs":[]},{"metadata":{"id":"MBWDVktGP47t","colab_type":"code","outputId":"15a6d2e5-fd77-4184-a492-a45e7c45bea4","executionInfo":{"status":"ok","timestamp":1543755452575,"user_tz":-60,"elapsed":643,"user":{"displayName":"Dimitris Michailidis","photoUrl":"https://lh4.googleusercontent.com/-gqfyDKSRdb4/AAAAAAAAAAI/AAAAAAAAAjM/8OOFAsZoU-M/s64/photo.jpg","userId":"12419194121595599642"}},"colab":{"base_uri":"https://localhost:8080/","height":204}},"cell_type":"code","source":["submission.head()"],"execution_count":31,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>test_id</th>\n","      <th>is_duplicate</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>15</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>20</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>21</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>23</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>34</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   test_id  is_duplicate\n","0       15             1\n","1       20             1\n","2       21             0\n","3       23             0\n","4       34             0"]},"metadata":{"tags":[]},"execution_count":31}]},{"metadata":{"id":"KOs7qBFvQ8vN","colab_type":"code","colab":{}},"cell_type":"code","source":["submission.to_csv('lstm_concat_no_extras.csv', index=False)"],"execution_count":0,"outputs":[]},{"metadata":{"id":"DDhtu7W_6O8_","colab_type":"code","outputId":"3878555e-3a09-4ef2-86cd-0be4f3d14f52","executionInfo":{"status":"ok","timestamp":1543755020935,"user_tz":-60,"elapsed":91263,"user":{"displayName":"Dimitris Michailidis","photoUrl":"https://lh4.googleusercontent.com/-gqfyDKSRdb4/AAAAAAAAAAI/AAAAAAAAAjM/8OOFAsZoU-M/s64/photo.jpg","userId":"12419194121595599642"}},"colab":{"base_uri":"https://localhost:8080/","height":51}},"cell_type":"code","source":["model.evaluate([Q1_test, Q2_test], y_test)"],"execution_count":22,"outputs":[{"output_type":"stream","text":["32315/32315 [==============================] - 91s 3ms/step\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["[0.3983176802096676, 0.8270772087192196]"]},"metadata":{"tags":[]},"execution_count":22}]},{"metadata":{"id":"fuGPZdYR-Wwl","colab_type":"code","colab":{}},"cell_type":"code","source":[""],"execution_count":0,"outputs":[]}]}